/*Write a program that reads two binary strings as command-line arguments and
prints the results of applying the ~ operator to each number and the results of
applying the &, |, and ^ operators to the pair. Show the results as binary strings.*/

/******************************INCLUDES*******************************/
#include <stdio.h>
#include <stdlib.h>
/********************************************************************/


/******************************DEFINES*******************************/
#define CHAR_SIZE    8
/********************************************************************/

/**********************************FUNCTIONS*************************/
char binary_to_decimal(char *binP){
	int j = 0;
	int i = 0;
	unsigned char output = 0;
	
	for(i = 0; i < CHAR_SIZE; i++){
		if(binP[i] == '1') //check bit value of the current position 
		{
		    printf("1 found at arr[%d]\n", i);
			output = output + pow(2, 7 - i);
		}
	}
	printf("output - %d", output);
	return output;
}
void decimal_to_binary(unsigned char *binP){
	unsigned char binary[9];
	int i = 0;                  //varible to conrol the first for loop
	int j = 0;					//variable to control the second for loop

	for(i = 0; i < CHAR_SIZE; i++){
		if(*binP > 0 ){             //put the remainder in array if *binP > 0
			binary[i] = (*binP % 2);
			*binP = *binP / 2;
			
		}
		else                        //else put 0s
			binary[i] = 0;
		
	}
	for(j = i - 1; j >= 0; j--){
		printf("%d", binary[j]);	//print the array from last to first element
	}
	printf("\n");
}
unsigned char inverse(char *ptr_inverse){
	unsigned char num = 0;
	
	num = ~*ptr_inverse;
	
	return num;
	
}
unsigned char and(unsigned char *ptr_1, unsigned char *ptr_2){
	unsigned char sum = 0;
	
	sum = *ptr_1 & *ptr_2;
	
	return sum;
	
}
unsigned char or(unsigned char *ptr_1, unsigned char *ptr_2){
	unsigned char sum = 0;
	
	sum = *ptr_1 | *ptr_2;
	
	return sum;
	
}
unsigned char xor(unsigned char *ptr_1, unsigned char *ptr_2){
	unsigned char sum = 0;
	
	sum = *ptr_1 ^ *ptr_2;
	
	return sum;
	
}
/********************************************************************/

/*********************************MAIN*******************************/
int main(){
	unsigned char *pbin1;
	unsigned char *pbin2;
	unsigned char dec1 = 0;
	unsigned char dec2 = 0;
	unsigned char sum_and = 0;
	unsigned char sum_or = 0;
	unsigned char sum_xor = 0;
	
	
	pbin1 = (char*)malloc(sizeof(char) * 1);
	pbin2 = (char*)malloc(sizeof(char) * 1);
	if(pbin1 == NULL){
		printf("Error");
		return -1;
	}
	if(pbin2 == NULL){
		printf("Error");
		return -1;
	}
	printf("Enter bin 1 and bin 2 and hit enter:\n");
	printf("01234567\t01234567\n");
	while(scanf("%s, %s", pbin1, pbin2)){
		
		dec1 = binary_to_decimal(pbin1);    //convert string 1 to decimal
		dec1 = inverse(dec1);				//Inverse decimal 1
		print("Inverse of %s is:", pbin1);  //print binary string 1
		decimal_to_binary(dec1);			//print inverse of string 1
		dec2 = binary_to_decimal(pbin2);	//convert string 2 to decimal
		dec2 = inverse(dec2)				//Inverse decimal 2
		print("Inverse of %s is:", pbin2);  //print binary string 1
		decimal_to_binary(dec2);			//print inverse of string 1
		sum_and = and(dec1, dec2);			//find num1 & num2
		sum_or = or(dec1, dec2);			//find num1 | num2		
		sum_xor = xor(dec1, dec2);			//find num1 & num2
		decimal_to_binary(sum_and);			//print binary 
		decimal_to_binary(sum_or);			//print binary
		decimal_to_binary(sum_xor);			//print binary

		
		
		
		
	}
}
/********************************************************************/